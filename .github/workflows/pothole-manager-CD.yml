name: pothole Manager CD

on:
  workflow_call:
    inputs:
      module:
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      EC2_IP:
        required: true
      EC2_USERNAME:
        required: true
      EC2_SSH_KEY:
        required: true
      CORE_APPLICATION_DEV_YML:
        required: true
      MANAGER_APPLICATION_YML:
        required: true
      MANAGER_APPLICATION_DEV_YML:
        required: true

permissions:
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 339712790479.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: pothole-${{ inputs.module }}
  MODULE_PACKAGE: pothole-${{ inputs.module }}-api
  IMAGE_NAME: pothole-${{ inputs.module }}-api

jobs:
  deploy:
    name: ${{ inputs.module }} deploy
    runs-on: ubuntu-22.04

    steps:
      - name: GitHub Repository Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: core application.yml 생성
        shell: bash
        run: |
          mkdir -p ./pothole-core/src/main/resources
          cd ./pothole-core/src/main/resources
          
          touch ./application-core-dev.yml
          echo "${{ secrets.CORE_APPLICATION_DEV_YML }}" > ./application-core-dev.yml

      - name: ${{ inputs.module }} application.yml 생성
        if: ${{ inputs.module }} == 'manager'
        shell: bash
        run: |
          mkdir -p ./pothole-manager-api/src/main/resources
          cd ./pothole-manager-api/src/main/resources
          
          touch ./application.yml
          echo "${{ secrets.MANAGER_APPLICATION_YML }}" > ./application.yml
          
          touch ./application-aws.yml
          echo "${{ secrets.MANAGER_APPLICATION_DEV_YML }}" > ./application-manager-dev.yml

      - name: ${{ inputs.module }} application.yml 생성
        if: ${{ inputs.module }} == 'worker'
        shell: bash
        run: |
          mkdir -p ./pothole-worker-api/src/main/resources
          cd ./pothole-worker-api/src/main/resources
          
          touch ./application.yml
          echo "${{ secrets.WORKER_APPLICATION_YML }}" > ./application.yml
          
          touch ./application-aws.yml
          echo "${{ secrets.WORKER_APPLICATION_DEV_YML }}" > ./application-worker-dev.yml

      - name: pothole build
        run: |
          ./gradlew clean pothole-core:bootJar -x test
          ./gradlew clean pothole-manager-api:bootJar -x test
          ./gradlew clean pothole-worker-api:bootJar -x test

      - name: 현재 디렉토리 출력
        run: |
          echo ${{ github.workspace }}
          ls -l

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: $AWS_REGION

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: ${{ inputs.module }} Build, tag, and push the image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd ./$MODULE_PACKAGE
          echo ${{ github.workspace }}
          ls -l

          # Build a Docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest .

      - name: 현재 디렉토리 출력
        run: |
          echo ${{ github.workspace }}
          ls -l

      - name: docker-compose.yml 파일 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./docker-compose.yml"
          target: "/home/ubuntu/"

      - name: docker compose down [${{ inputs.module }}] on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker compose down $IMAGE_NAME

      - name: pull image from ECR
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
            docker image tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $IMAGE_NAME

      - name: docker compose up [Manager] on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker-compose up -d $IMAGE_NAME
            docker image prune -f