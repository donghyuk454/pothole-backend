name: pothole reusable CD

on:
  workflow_call:
    inputs:
      module:
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      EC2_IP:
        required: true
      EC2_USERNAME:
        required: true
      EC2_SSH_KEY:
        required: true


permissions:
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 339712790479.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: pothole-${{ inputs.module }}
  MODULE_PACKAGE: pothole-${{ inputs.module }}-api
  IMAGE_NAME: pothole-${{ inputs.module }}-api
  DOCKER_COMPOSE_SERVICES_NAME: pothole-${{ inputs.module }}-api
  IMAGE_TAG: ${{ github. sha }}

jobs:
  deploy:
    name: ${{ inputs.module }} deploy
    runs-on: ubuntu-22.04

    steps:
      - name: GitHub Repository Checkout
        uses: actions/checkout@v3

      - name: core jar 파일 다운
        uses: actions/download-artifact@v4
        with:
          name: pothole-core-artifact
          path: ./pothole-core/build/libs/

      - name: ${{ inputs.module }} jar 파일 다운
        uses: actions/download-artifact@v4
        with:
          name: pothole-${{ inputs.module }}-artifact
          path: ./pothole-${{ inputs.module }}-api/build/libs/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push the image ${{ inputs.module }} to Amazon ECR
        run: |
          cd ./${{ env.MODULE_PACKAGE }}
          
          # Build a Docker container and push it to ECR
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          echo "Pushing image to ECR..."
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: docker-compose.yml 파일 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./docker-compose.yml"
          target: "/home/ubuntu/"

      - name: docker compose down [${{ inputs.module }}] on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker-compose stop ${{ env.IMAGE_NAME }}
            docker-compose rm -f ${{ env.IMAGE_NAME }}
            docker image prune -f -a

      - name: pull image from ECR
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            
            docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            docker image tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_NAME }}

      - name: docker compose up [${{ inputs.module }}] on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker-compose up -d ${{ env.DOCKER_COMPOSE_SERVICES_NAME }}
            docker image prune -f -a